{\rtf1\ansi\ansicpg1254\deff0\nouicompat\deflang1055{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset1 Segoe UI Symbol;}{\f2\fnil\fcharset238 Calibri;}{\f3\fnil Calibri;}{\f4\fnil\fcharset162 Calibri;}}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang31 ITF_008_2_STUDENT.md 3/17/2021\par
STUDENT VERSION (TW-2)\par
Meeting Agenda\par
\f1\u9654?\f0\lang1033  Icebreaking\par
\f1\u9654?\f0  Questions\par
\f1\u9654?\f0  Interview Questions\par
\f1\u9654?\f0  Coffee Break\par
\f1\u9654?\f0  Logical Reasoning Questions\par
\f1\u9654?\f0  Video of the week\par
\f1\u9654?\f0  Retro meeting\par
\f1\u9654?\f0  Case study / project\par
\par
Teamwork Schedule\par
Ice-breaking 10m\par
Personal Questions (Stay at home & Corona, Study Environment, Kids etc.)\par
Any challenges (Classes, Coding, studying, etc.)\par
Ask how they\rquote re studying, give personal advice.\par
Remind that practice makes perfect.\par
Ask Questions 15m\par
1. What do we mean by Computational Thinking?\par
A. Breaking a task into smaller tasks\par
B. Understanding a complex problem and developing possible solutions\par
C. Focusing on what is important, ignoring what is unnecessary\par
D. Selecting a computer to use\par
2. Breaking a complex problem down into smaller problems and solving each one individually?\par
A. Programming\par
B. Decomposition\par
C. Abstraction\par
D. Algorithmic Thinking\par
3. Why do we need to think computationally?\par
A. To help us to think like a computer\par
B. To help us program\par
C. To help us solve complex problems more easily\par
D. None of these\par
4. What is an Algorithm?\par
A. Some instructions\par
B. Something a computer does to think\par
ITF_008_2_STUDENT.md 3/17/2021\par
3 / 6\par
C. A series of steps and instructions with given outputs to produce an input\par
D. A series of steps and instructions with given inputs to produce an output\par
5. What is the result of the following operation?\par
print(1 + 4*3)\par
A. 15\par
B. 13\par
C. 12\par
D. 10\par
6. Which python code gives the output "I love Python" ?\par
A. input("I love Python")\par
B. output("I love Python")\par
C. read("I love Python")\par
D. print("I love Python")\par
7. Guess the output of this code:\par
print( (3**2)//2 )\par
A. 0\par
B. 2\par
C. 4\par
D. 3\par
8. What symbol(s) do you use to assess equality between two elements?\par
A. &&\par
B. ==\par
C. =\par
D. ||\par
9. What value would be returned by this check for equality?\par
5!=6\par
ITF_008_2_STUDENT.md 3/17/2021\par
4 / 6\par
A. Yes\par
B. False\par
C. True\par
D. None\par
10. Select all options that print?\par
hello-how-are-you\par
A. print(\lquote hello\rquote , \lquote -how\rquote , \lquote are\rquote , \lquote -you\rquote )\par
B. print(\lquote hello\rquote , \lquote how\rquote , \lquote are-\rquote , \lquote you\rquote  + \lquote -\lquote  * 4)\par
C. print(\lquote hello-\lquote  + \lquote how-are-you\rquote )\par
D. print(\lquote hello\rquote  + \lquote -\lquote  + \lquote how\rquote  + \lquote -\lquote  + \lquote are\rquote  + \lquote you\rquote )\par
Interview Questions 15m\par
1. What does computational thinking stand for and why it is important?\par

\pard\sa200\sl276\slmult1\qj So what actually is \lquote computational thinking\rquote ? It is the thought processes involved in problem solving, so that the solutions are represented in a form that can be effectively carried out by an information-processing agent, such as a computer. Core concepts involved in computational thinking include:\par
algorithmic thinking - developing a set of instructions or sequence of steps to solve a problem;\par
evaluation - ensuring a solution is fit-for-purpose;\par
decomposition - breaking a problem down into its component parts;\par
abstraction - hiding detail or removing complexity without losing the important detail required to solve a problem;\par
generalisation - finding a general approach to a set of problems.\par
\'d6yleyse "say\f2\u305?sal d\f0\'fc\f2\'ba\f0\'fcnme" asl\f2\u305?nda nedir? Problem \f0\'e7\'f6zmede yer alan d\'fc\f2\'ba\f0\'fcnce s\'fcre\'e7leridir, b\'f6ylece \'e7\'f6z\'fcmler bilgisayar gibi bir bilgi i\f2\'baleme arac\u305? taraf\u305?ndan etkin bir \'baekilde ger\f0\'e7ekle\f2\'batirilebilecek bir bi\f0\'e7imde temsil edilir. Hesaplamal\f2\u305? d\f0\'fc\f2\'ba\f0\'fcnmeyle ilgili temel kavramlar \f2\'baunlar\u305? i\f0\'e7erir:\par
algoritmik d\'fc\f2\'ba\f0\'fcnme - bir problemi \'e7\'f6zmek i\'e7in bir dizi talimat veya ad\f2\u305?m dizisi geli\'batirmek;\par
de\u287?erlendirme - bir \f0\'e7\'f6z\'fcm\'fcn amaca uygun olmas\f2\u305?n\u305? sa\u287?lamak;\par
ayr\u305?\'bat\u305?rma - bir sorunu bile\'baen par\f0\'e7alar\f2\u305?na ay\u305?rmak;\par
soyutlama - bir sorunu \f0\'e7\'f6zmek i\'e7in gereken \'f6nemli ayr\f2\u305?nt\u305?lar\u305? kaybetmeden ayr\u305?nt\u305?lar\u305? gizlemek veya karma\'ba\u305?kl\u305?\u287?\u305? ortadan kald\u305?rmak;\par
genelleme - bir dizi soruna genel bir yakla\'ba\u305?m bulmak.\f0\par

\pard\sa200\sl276\slmult1 2. What are the key features of Python?\par
Python provides lots of features that are listed below.\par
1) Easy to Learn and Use\par
Python is easy to learn and use. It is developer-friendly and high level programming language.\par
2) Expressive Language\par
Python language is more expressive means that it is more understandable and readable.\par
3) Interpreted Language\par
Python is an interpreted language i.e. interpreter executes the code line by line at a time. This makes debugging easy and thus suitable for beginners.\par
4) Cross-platform Language\par
Python can run equally on different platforms such as Windows, Linux, Unix and Macintosh etc. So, we can say that Python is a portable language.\par
5) Free and Open Source\par
Python language is freely available at offical web address.The source-code is also available. Therefore it is open source.\par
6) Object-Oriented Language\par
Python supports object oriented language and concepts of classes and objects come into existence.\par
7) Extensible\par
It implies that other languages such as C/C++ can be used to compile the code and thus it can be used further in our python code.\par
8) Large Standard Library\par
Python has a large and broad library and prvides rich set of module and functions for rapid application development.\par
9) GUI Programming Support\par
Graphical user interfaces can be developed using Python.\par
10) Integrated\par
It can be easily integrated with languages like C, C++, JAVA etc.\par
Python, a\f2\'baa\u287?\u305?da listelenen bir\f0\'e7ok \'f6zellik sa\f2\u287?lar.\par
1) \f0\'d6\f2\u287?renmesi ve Kullanmas\u305? Kolay\par
Python \f0\'f6\f2\u287?renmesi ve kullanmas\u305? kolayd\u305?r. Geli\'batirici dostu ve \f0\'fcst d\'fczey bir programlama dilidir.\par
2) \f2\u304?fade Edici Dil\par
Python dili daha etkileyici, daha anla\'ba\u305?l\u305?r ve okunakl\u305? oldu\u287?u anlam\u305?na gelir.\par
3) Yorumlanan Dil\par
Python yorumlanm\u305?\'ba bir dildir, yani yorumlay\u305?c\u305? kodu bir seferde sat\u305?r sat\u305?r y\f0\'fcr\'fct\'fcr. Bu, hata ay\f2\u305?klamay\u305? kolayla\'bat\u305?r\u305?r ve bu nedenle yeni ba\'balayanlar i\f0\'e7in uygundur.\par
4) \'c7apraz platform Dili\par
Python, Windows, Linux, Unix ve Macintosh gibi farkl\f2\u305? platformlarda e\'bait olarak \f0\'e7al\f2\u305?\'baabilir. Dolay\u305?s\u305?yla, Python'un ta\'ba\u305?nabilir bir dil oldu\u287?unu s\f0\'f6yleyebiliriz.\par
5) \'dccretsiz ve A\'e7\f2\u305?k Kaynak\par
Python dili resmi web adresinde \f0\'fccretsiz olarak mevcuttur. Kaynak kodu da mevcuttur. Bu nedenle a\'e7\f2\u305?k kaynakl\u305?d\u305?r.\par
6) Nesne Tabanl\u305? Dil\par
Python, nesne y\f0\'f6nelimli dili destekler ve s\f2\u305?n\u305?flar\u305?n ve nesnelerin kavramlar\u305? ortaya \f0\'e7\f2\u305?kar.\par
7) Geni\'baletilebilir\par
C / C ++ gibi di\u287?er dillerin kodu derlemek i\f0\'e7in kullan\f2\u305?labilece\u287?ini ve dolay\u305?s\u305?yla python kodumuzda daha fazla kullan\u305?labilece\u287?ini ima eder.\par
8) B\f0\'fcy\'fck Standart Kitapl\f2\u305?k\par
Python'un geni\'ba ve geni\'ba bir kitapl\u305?\u287?\u305? vard\u305?r ve h\u305?zl\u305? uygulama geli\'batirme i\f0\'e7in zengin mod\'fcl ve i\f2\'balevler sunar.\par
9) GUI Programlama Deste\u287?i\par
Python kullan\u305?larak grafik kullan\u305?c\u305? aray\f0\'fczleri geli\f2\'batirilebilir.\par
10) Entegre\par
C, C ++, JAVA vb. Dillerle kolayca entegre edilebilir.\f0\par
\par
3. How memory is managed in Python?\par
As we know, Python uses the dynamic memory allocation which is managed by the Heap data structure. Memory Heap holds the objects and other data structures that will be used in the program. Python memory manager manages the allocation or de-allocation of the heap memory space through the API functions.\par
Bildi\f2\u287?imiz gibi Python, Heap veri yap\u305?s\u305? taraf\u305?ndan y\f0\'f6netilen dinamik bellek tahsisini kullan\f2\u305?r. Bellek Y\u305?\u287?\u305?n\u305?, programda kullan\u305?lacak nesneleri ve di\u287?er veri yap\u305?lar\u305?n\u305? tutar. Python bellek y\f0\'f6neticisi, API i\f2\'balevleri arac\u305?l\u305?\u287?\u305?yla y\u305?\u287?\u305?n bellek alan\u305?n\u305?n tahsisini veya ayr\u305?lmas\u305?n\u305? y\f0\'f6netir.\par
4. What are python modules and names some commonly used built-in modules in Python?\par
OS Module.\par
Sys Module.\par
Math Module.\par
Statistics Module.\par
Collections Module.\par
Random Module.\par
Python - Built-in Modules\par
The Python interactive shell has a number of built-in functions. They are loaded automatically as a shell starts and are always available, such as print() and input() for I/O, number conversion functions int(), float(), complex(), data type conversions list(), tuple(), set(), etc.\par
\par
In addition to built-in functions, a large number of pre-defined functions are also available as a part of libraries bundled with Python distributions. These functions are defined in modules are called built-in modules.\par
\par
Built-in modules are written in C and integrated with the Python shell. Each built-in module contains resources for certain system-specific functionalities such as OS management, disk IO, etc. The standard library also contains many Python scripts (with the .py extension) containing useful utilities.\par
\par
To display a list of all available modules, use the following command in the Python console:\par
\par
Python IDLE Copy\par
>>> help('modules') \par
\par
IPython             _weakrefset         heapq               secrets\par
__future__          _winapi             hmac                select\par
_abc                abc                 html                selectors\par
_ast                aifc                http                setuptools\par
_asyncio            antigravity         idlelib             shelve\par
_bisect             argparse            imaplib             shlex\par
_blake2             array               imghdr              shutil\par
_bootlocale         ast                 imp                 signal\par
_bz2                asynchat            importlib           simplegeneric\par
_codecs             asyncio             ind                 site\par
_codecs_cn          asyncore            inspect             six\par
_codecs_hk          atexit              io                  smtpd\par
_codecs_iso2022     audioop             ipaddress           smtplib\par
_codecs_jp          autoreload          ipython_genutils    sndhdr\par
_codecs_kr          backcall            itertools           socket\par
_codecs_tw          base64              jedi                socketserver\par
_collections        bdb                 json                sqlite3\par
_collections_abc    binascii            keyword             sre_compile\par
_compat_pickle      binhex              lib2to3             sre_constants\par
_compression        bisect              linecache           sre_parse\par
_contextvars        builtins            locale              ssl\par
_csv                bz2                 logging             stat\par
_ctypes             cProfile            lzma                statistics\par
_ctypes_test        calendar            macpath             storemagic\par
_datetime           cgi                 mailbox             string\par
_decimal            cgitb               mailcap             stringprep\par
_distutils_findvs   chunk               marshal             struct\par
_dummy_thread       cmath               math                subprocess\par
_elementtree        cmd                 mimetypes           sunau\par
_functools          code                mmap                symbol\par
_hashlib            codecs              modulefinder        sympyprinting\par
_heapq              codeop              msilib              symtable\par
_imp                collections         msvcrt              sys\par
_io                 colorama            multiprocessing     sysconfig\par
_json               colorsys            netrc               tabnanny\par
_locale             compileall          nntplib             tarfile\par
_lsprof             concurrent          nt                  telnetlib\par
_lzma               configparser        ntpath              tempfile\par
_markupbase         contextlib          nturl2path          test\par
_md5                contextvars         numbers             tests\par
_msi                copy                opcode              textwrap\par
_multibytecodec     copyreg             operator            this\par
_multiprocessing    crypt               optparse            threading\par
_opcode             csv                 os                  time\par
_operator           ctypes              parser              timeit\par
_osx_support        curses              parso               tkinter\par
_overlapped         cythonmagic         pathlib             token\par
_pickle             dataclasses         pdb                 tokenize\par
_py_abc             datetime            pickle              trace\par
_pydecimal          dbm                 pickleshare         traceback\par
_pyio               decimal             pickletools         tracemalloc\par
_queue              decorator           pip                 traitlets\par
_random             difflib             pipes               tty\par
_sha1               dis                 pkg_resources       turtle\par
_sha256             distutils           pkgutil             turtledemo\par
_sha3               doctest             platform            types\par
_sha512             dummy_threading     plistlib            typing\par
_signal             easy_install        poplib              unicodedata\par
_sitebuiltins       email               posixpath           unittest\par
_socket             encodings           pprint              urllib\par
_sqlite3            ensurepip           profile             uu\par
_sre                enum                prompt_toolkit      uuid\par
_ssl                errno               pstats              venv\par
_stat               faulthandler        pty                 warnings\par
_string             filecmp             py_compile          wave\par
_strptime           fileinput           pyclbr              wcwidth\par
_struct             fnmatch             pydoc               weakref\par
_symtable           formatter           pydoc_data          webbrowser\par
_testbuffer         fractions           pyexpat             winreg\par
_testcapi           ftplib              pygments            winsound\par
_testconsole        functools           queue               wsgiref\par
_testimportmultiple gc                  quopri              xdrlib\par
_testmultiphase     genericpath         random              xml\par
_thread             getopt              re                  xmlrpc\par
_threading_local    getpass             reprlib             xxsubtype\par
_tkinter            gettext             rlcompleter         zipapp\par
_tracemalloc        glob                rmagic              zipfile\par
_warnings           gzip                runpy               zipimport\par
_weakref            hashlib             sched               zlib\par
\par
Enter any module name to get more help.  Or, type "modules spam" to search\par
for modules whose name or summary contain the string "spam".\par
\par
5. What are the four stages of computational thinking?\par
What is computational thinking?\par
Computers can be used to help us solve problems. However, before a problem can be tackled, the problem itself and the ways in which it could be solved need to be understood.\par
\par
Computational thinking allows us to do this.\par
\par
Computational thinking allows us to take a complex problem, understand what the problem is and develop possible solutions. We can then present these solutions in a way that a computer, a human, or both, can understand.\par
\par
The four cornerstones of computational thinking\par
There are four key techniques (cornerstones) to computational thinking:\par
\par
decomposition - breaking down a complex problem or system into smaller, more manageable parts\par
pattern recognition \f3\endash  looking for similarities among and within problems\par
abstraction \endash  focusing on the important information only, ignoring irrelevant detail\par
algorithms - developing a step-by-step solution to the problem, or the rules to follow to solve the problem\par
Each cornerstone is as important as the others. They are like legs on a table - if one leg is missing, the table will probably collapse. Correctly applying all four techniques will help when programming a computer.\par
\f0\par
6. Does Python have OOPs concepts?\par
What are Python OOPs Concepts?\par
Major OOP (object-oriented programming) concepts in Python include Class, Object, Method, Inheritance, Polymorphism, Data Abstraction, and Encapsulation.\par
\par
That was all about the differences, moving ahead let\rquote s get an idea of classes and objects.\par
\par
What are Classes and Objects?\par
\par
A class is a collection of objects or you can say it is a blueprint of objects defining the common attributes and behavior. Now the question arises, how do you do that?\par
\par
Well, it logically groups the data in such a way that code reusability becomes easy. I can give you a real-life example- think of an office going \rquote employee\rquote  as a class and all the attributes related to it like \rquote emp_name\rquote , \rquote emp_age\rquote , \rquote emp_salary\rquote , \rquote emp_id\rquote  as the objects in Python. Let us see from the coding perspective that how do you instantiate a class and an object.\par
\par
Class is defined under a \ldblquote Class\rdblquote  Keyword.\par
Example:\par
\par
1\par
class class1(): // class 1 is the name of the class\par
Note: Python is not case-sensitive.\par
\par
 Objects:\par
Objects are an instance of a class. It is an entity that has state and behavior. In a nutshell, it is an instance of a class that can access the data.\par
\par
Syntax: obj = class1()\par
\par
Here obj is the \ldblquote object \ldblquote  of class1.\par
\par
Creating an Object and Class in python:\par
Example:\par
\par
1\par
2\par
3\par
4\par
5\par
6\par
7\par
8\par
9\par
10\par
class employee():\par
    def __init__(self,name,age,id,salary):   //creating a function\par
        self.name = name // self is an instance of a class\par
        self.age = age\par
        self.salary = salary\par
        self.id = id\par
 \par
emp1 = employee("harshit",22,1000,1234) //creating objects\par
emp2 = employee("arjun",23,2000,2234)\par
print(emp1.__dict__)//Prints dictionary\par
Explanation: \rquote emp1\f3\u8242? and \rquote emp2\u8242? are the objects that are instantiated against the class \rquote employee\rquote .Here, the word (__dict__) is a \ldblquote dictionary\rdblquote  which prints all the values of object \lquote emp1\rquote  against the given parameter (name, age, salary).(__init__) acts like a constructor that is invoked whenever an object is created.\par
I hope now you guys won\rquote t face any problem while dealing with \lquote classes\rquote  and \lquote objects\rquote  in the futue.\par
With this, let me take you through a ride of Object Oriented Programming methodologies:\par
Object-Oriented Programming methodologies:\par
Object-Oriented Programming methodologies deal with the following concepts.\par
Inheritance\par
Polymorphism\par
Encapsulation\par
Abstraction\par
Let us understand the first concept of inheritance in detail.\par
\f0\par
ITF_008_2_STUDENT.md 3/17/2021\par
Coffee Break 10m\par
Logical Reasoning Questions 15m\par
1. Five children are sitting in a row. S is sitting next to P but not T. K is sitting next to R who is sitting on\par
the extreme left and T is not sitting next to K. Who are sitting adjacent to S?\par
A. K & P\par
B. R & P\par
C. Only P\par
D. P and T\par
2. In a family, there are husband-wife, two sons and two daughters. All the ladies were invited to a\par
dinner. Both sons went out to play. Husband did not return from office. Who was at home?\par
A. Only wife was at home\par
B. Nobody was at home\f4\lang1055  +++\f0\lang1033\par
C. Only sons were at home\par
D. All ladies were at home\par
\b\fs28 Video of the Week 10m\par
\b0\fs22 Computational Thinking: What Is It? How Is It Used?\par
\b\fs28 Retro Meeting on a personal and team level 10m\b0\fs22\par
Ask the questions below:\par
What went well?\par
What could be improved?\par
What will we commit to do better in the next week?\par
6 / 6\par
\par
Closing 5m\par
Next week\rquote s plan\par
QA Session\lang31\par
}
 